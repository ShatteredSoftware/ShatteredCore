import org.apache.tools.ant.filters.ReplaceTokens
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    ext.kotlin_version = '1.3.72'
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

apply plugin: 'java'
apply plugin: 'nebula-aggregate-javadocs'
apply plugin: 'maven-publish'

group = project.property('pluginGroup')
version = project.property('version')

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        name = "PaperMC"
        url = "https://papermc.io/repo/repository/maven-public/"
    }
    maven {
        name = "Jitpack"
        url = 'https://jitpack.io'
    }
    maven {
        name = "Spigot"
        url = "https://hub.spigotmc.org/nexus/content/groups/public"
    }
    maven {
        name = "CodeMC-Repo"
        url = 'http://repo.codemc.io/repository/maven-public'
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

task getHash {
    def p1 = 'git rev-parse --short HEAD'.execute()
    p1.waitFor()
    getHash.ext.hash = p1.text
}

processResources {
    dependsOn getHash
    def hash = getHash.hash
    with copySpec{
        from 'src/main/resources'
        filter(ReplaceTokens, tokens: [description: project.property('description'),
                                       projectName: project.property('projectName'),
                                       pluginName : project.property('pluginName'),
                                       version    : project.version + ' (' + hash.trim() + ')'])
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.15.1-R0.1-SNAPSHOT'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.google.code.gson:gson:2.8.6'
    compile "fr.minuskube.inv:smart-invs:1.2.7"
    compile "de.tr7zw:item-nbt-api:2.3.1"
    compile "org.bstats:bstats-bukkit:1.7"
    compile "com.github.cryptomorin:XSeries:5.3.1"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task apiJar(type: ShadowJar) {
    from sourceSets.main.output
    dependencies {
        include(dependency("fr.minuskube.inv:smart-invs:1.2.7"))
        include(dependency("de.tr7zw:item-nbt-api:2.3.1"))
        include(dependency("org.bstats:bstats-bukkit:1.7"))
        include(dependency("com.github.cryptomorin:XSeries:5.3.1"))
        include(dependency("com.google.code.gson:gson:.*"))
    }
    relocate 'fr.minuskube.inv', 'com.github.shatteredsuite.core.include.inv'
    relocate 'de.tr7zw.changeme.nbtapi', 'com.github.shatteredsuite.core.include.nbt'
    relocate 'org.bstats.bukkit', 'com.github.shatteredsuite.core.include.stats'
    relocate 'com.cryptomorin.xseries', 'com.github.shatteredsuite.core.include.xseries'
    classifier = 'api'
    configurations = [project.configurations.compile]
}

task distJar(type: ShadowJar) {
    from sourceSets.main.output
    baseName = 'ShatteredCore'
    classifier = 'dist'
    configurations = [project.configurations.compile]
    dependencies {
        include(dependency("org.jetbrains.kotlin:.*:.*"))
        include(dependency("fr.minuskube.inv:smart-invs:1.2.7"))
        include(dependency("de.tr7zw:item-nbt-api:2.3.1"))
        include(dependency("org.bstats:bstats-bukkit:1.7"))
        include(dependency("com.github.cryptomorin:XSeries:5.3.1"))
        include(dependency("com.google.code.gson:gson:.*"))
    }
    relocate 'fr.minuskube.inv', 'com.github.shatteredsuite.core.include.inv'
    relocate 'de.tr7zw.changeme.nbtapi', 'com.github.shatteredsuite.core.include.nbt'
    relocate 'org.bstats.bukkit', 'com.github.shatteredsuite.core.include.stats'
    relocate 'com.cryptomorin.xseries', 'com.github.shatteredsuite.core.include.xseries'
}

task allJars() {
    dependsOn distJar, apiJar, javadocJar, sourcesJar
}

publishing {
    repositories {
        maven {
            name = "GithubPackages"
            url = uri("https://maven.pkg.github.com/shatteredsuite/shatteredcore")
            credentials {
                username = project.findProject("gpr.user") ?: System.getenv("USERNAME")
                username = project.findProject("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifactId 'core'
            artifact javadocJar
            artifact sourcesJar
            artifact distJar
            artifact apiJar
            pom {
                name = project.property("projectName")
                description = project.property('description')
                url = 'https://github.com/ShatteredSuite/' + project.property("pluginName")
                developers {
                    developer {
                        id = 'UberPilot'
                        name = 'UberPilot'
                        email = 'uberpilot99@gmail.com'
                    }
                }
                withXml {
                    def depsNode = asNode().appendNode('dependencies')

                    configurations.compile.allDependencies.each {
                        def depNode = depsNode.appendNode('dependency')
                        depNode.appendNode('groupId', it.group)
                        depNode.appendNode('artifactId', it.name)
                        depNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
