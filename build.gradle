import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext.kotlin_version = '1.5.30'
    ext.xseries_version = project.property('xSeriesVersion')
    ext.nbt_version = project.property('nbtApiVersion')
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.20'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'jacoco'
    id 'kr.entree.spigradle' version '2.2.4'
}

apply plugin: 'java'
apply plugin: 'nebula-aggregate-javadocs'
apply plugin: 'maven-publish'

group = project.property('pluginGroup')
version = project.property('version')

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://papermc.io/repo/repository/maven-public/'
    }
    maven {
        url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven { url = 'https://jitpack.io' }
    spigotmc()
    codemc()
}

spigot {
    debug {
        buildVersion = project.property("apiVersion")
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
    withJavadocJar()
    withSourcesJar()
}

task getHash {
    def p1 = 'git rev-parse --short HEAD'.execute()
    p1.waitFor()
    getHash.ext.hash = p1.text
}


processResources {
    dependsOn getHash
    def hash = getHash.hash
    with copySpec {
        from 'src/main/resources'
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        filter(ReplaceTokens, tokens: [description: project.property('description'),
                                       projectName: project.property('projectName'),
                                       pluginName : project.property('pluginName'),
                                       website    : project.property('website'),
                                       apiVersion : project.property('apiVersion'),
                                       version    : project.version + ' (' + hash.trim() + ')'])
    }
}

configurations {
    implementation {
        canBeResolved true
    }
}

registerCustomOutputTask("hhenrichsen", "C://Users/Hunter/Documents/Servers/TestServer/plugins", name)

def registerCustomOutputTask(name, path, plugin) {
    tasks.register('build' + name, Copy) {
        group('development')
        outputs.upToDateWhen { false }
        dependsOn ':jars'
        from(file('build/libs/' + plugin + '-' + version + '.jar'))
        into(file(path))
        rename { String fileName ->
            fileName.replace(plugin + '-' + version + '-all.jar', plugin + ".jar")
        }
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:16.0.2'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation group: "com.google.code.gson", name: "gson", version: '2.8.7'
    implementation "com.fasterxml.jackson.core:jackson-core:2.12.4"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.12.4"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.4"

    implementation "com.zaxxer:HikariCP:5.0.0"

    def withoutSpigot = { exclude group: "org.spigotmc", module: "spigot-api" }

    implementation group: "io.papermc.paper", name: "paper-api", version: project.property("paperVersion")
    implementation bStats()
    implementation group: "fr.minuskube.inv", name: "smart-invs", version: project.property("smartInvsVersion"), withoutSpigot
    implementation group: "de.tr7zw", name: "item-nbt-api", version: project.property("nbtApiVersion")
    implementation group: "com.github.cryptomorin", name: "XSeries", version: project.property("xSeriesVersion")

    // Testing
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.4.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.4.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.4.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.11.2'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '2.2'
    testImplementation group: 'com.natpryce', name: 'hamkrest', version: '1.8.0.1'
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_16
}
compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_16
}


task jars {
    dependsOn shadowJar, javadocJar, sourcesJar
}

shadowJar {
    from sourceSets.main.output
    baseName = 'ShatteredCore'
    classifier = null
    configurations = [project.configurations.implementation]
    dependencies {
        include(dependency("fr.minuskube.inv:smart-invs:$smartInvsVersion"))
        include(dependency("de.tr7zw:item-nbt-api:$nbt_version"))
        include(dependency("org.bstats:bstats-bukkit:1.7"))
        include(dependency("com.github.cryptomorin:XSeries:$xseries_version"))
    }
    minimize {
        exclude(dependency("fr.minuskube.inv:smart-invs:$smartInvsVersion"))
        exclude(dependency("de.tr7zw:item-nbt-api:$nbt_version"))
        exclude(dependency("org.bstats:bstats-bukkit:1.7"))
        exclude(dependency("com.github.cryptomorin:XSeries:$xseries_version"))
    }
    relocate 'fr.minuskube.inv', 'com.github.shatteredsuite.core.include.inv'
    relocate 'de.tr7zw.changeme.nbtapi', 'com.github.shatteredsuite.core.include.nbt'
    relocate 'org.bstats.bukkit', 'com.github.shatteredsuite.core.include.stats'
    relocate 'com.cryptomorin.xseries', 'com.github.shatteredsuite.core.include.xseries'
}

tasks.generateSpigotDescription.enabled = false

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled true
    }
}

publishing {
    repositories {
        maven {
            name = "GithubPackages"
            url = uri("https://maven.pkg.github.com/shatteredsuite/shatteredcore")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifactId 'ShatteredCore'
            artifact javadocJar
            artifact sourcesJar
            artifact shadowJar
            pom {
                name = project.property("projectName")
                description = project.property('description')
                url = 'https://github.com/ShatteredSuite/' + project.property("pluginName")
                developers {
                    developer {
                        id = 'UberPilot'
                        name = 'UberPilot'
                        email = 'uberpilot99@gmail.com'
                    }
                }
                withXml {
                    def depsNode = asNode().appendNode('dependencies')

                    configurations.implementation.allDependencies.each {
                        def depNode = depsNode.appendNode('dependency')
                        depNode.appendNode('groupId', it.group)
                        depNode.appendNode('artifactId', it.name)
                        depNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
